#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef long double ld;

const int N = 1e6 + 5;

struct House{
    ll x, y;
    bool haveElec;
};

struct DSU{
    vector <ll> par,sz;

    void make_set(int n){
        par.resize(n + 1, 0);
        sz.resize(n + 1, 0);
        for( int i = 1; i <= n; i++ ){
            par[i] = i;
            sz[i] = 1;
        }
    }

    int find(int u){
        if(u == par[u]) return u;
        return par[u] = find(par[u]);
    }

    bool Union(int u, int v){
        u = find(u);
        v = find(v);
        if(u == v) return false;
        if(sz[u] < sz[v]) swap(u, v);
        par[v] = u;
        sz[u] += sz[v];
        return true;
    }
} dsu;

struct E{
    ld dis;
    int xx, yy;
    E(ld _dis, int _xx, int _yy) : dis(_dis), xx(_xx), yy(_yy) {};
};
ld dist(House a, House b){
    return sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));
}
int n;
void Solve(){   
    cin >> n;
    vector <House> H(n + 5);
    for( int i = 1; i <= n; i++ ){
        cin >> H[i].x >> H[i].y >> H[i].haveElec;
    }
    dsu.make_set(n);
    // vector <pair<ld, pair <int, int>>> v;
    vector <E> v;
    for( int i = 1; i <= n; i++ ){
        for( int j = i + 1; j <= n; j++ ){
            if(H[i].haveElec && H[j].haveElec) continue;
            v.push_back({dist(H[i], H[j]), i, j});
        }
    }
    sort(v.begin(), v.end(), [](E& x, E& y){
        return x.dis < y.dis;
    });
    ld ans = 0.0;
    for(auto e : v){
        int x = dsu.find(e.xx);
        int y = dsu.find(e.yy);
        if(x == y) continue;
        if(H[x].haveElec && H[y].haveElec) continue;
        if(H[x].haveElec || H[y].haveElec){
            H[x].haveElec = true;
            H[y].haveElec = true;
        }
        if(x != y){
            ans += e.dis;
            dsu.Union(x, y);
        }
    }
    cout << fixed << setprecision(3) << ans;
}
int main(){
  ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
  int cas = 1; 
  //cin >> cas;
  while(cas--) Solve();
  return 0;
}
